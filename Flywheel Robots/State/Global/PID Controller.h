#ifndef TBHController_h
#endif
#define TBHController_h
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//
//Some parts of this structure are from James Pearman (jpearman on the VEX Forum).
//However, we have modified this code to use PI instead of TBH and to work with flywheels
//with multiple sides

/**
/* Last edit 1023 8-Feb-16, Evan
*/

// Update inteval (in mS) for the flywheel control loop
#define FW_LOOP_SPEED              25

// Maximum power we want to send to the flywheel motors
#define FW_MAX_POWER              127

// Structure to gather all the flywheel ralated data
typedef struct _fw_controller {
    long            counter;                ///< loop counter used for debug

    // encoder tick per revolution
    float           ticks_per_rev;          ///< encoder ticks per revolution

    // Encoder
    long            e_current;              ///< current encoder count
    long            e_last;                 ///< last encoder count
    long						encoder_timestamp;      ///< time of last encoder reading; helps prevent issues relating to I2C timing with multiple IEMs
		long						encoder_timestamp_last; ///< time of second to last encoder reading

    // velocity measurement
    float           v_current;              ///< current velocity in rpm
    float						v_last;									///< last velocity in rpm
    //long            v_time;                 ///< Time of last velocity calculation

    // PI algorithm variables
    long            target;                 ///< target velocity
    long            current;                ///< current velocity
    long            last;                   ///< last velocity
    float           error;                  ///< error between actual and target velocities
    float           last_error;             ///< error last time update called
    float						errorSum;								///< sum of error for integral calculation
    float           drive;                  ///< final drive out of PI (0.0 to 1.0)
    float           drive_at_zero;          ///< drive at last zero crossing
    long            first_cross;            ///< flag indicating first zero crossing
    float           drive_approx;           ///< estimated open loop drive
    float						MOTOR_TPR;							///< ticks per rev for IME

    //constants
    float						Kp;											///< proportional constant
    float						Ki;											///< integral constant

    //for optional exponential weighted moving average
    float						rpm_average;						///< the current RPM value used for velocity calculations
    float						raw_last_rpm;						///< only for debugging the weighted average
    float						alpha;									///< constant for average calculation

    // final motor drive
    long            motor_drive;            ///< final motor control value
    } fw_controller;

void pidInit (fw_controller *fw, float MOTOR_TPR, float Kp, float Ki) {
	fw->MOTOR_TPR = MOTOR_TPR;
	fw->ticks_per_rev = MOTOR_TPR;
	fw->Kp = Kp;
	fw->Ki = Ki;
	fw->alpha = 1;
	//ensure that the variables that store previous values start at 0 (i.e., will have a value and not be null/empty)
	fw->encoder_timestamp_last = 0;
	fw->e_last = 0;
	fw->last_error = 0;
	fw->v_last = 0;
}

void getNewAverage(fw_controller *fw, float newVal) {
	if(!fw->rpm_average) { //if there's no average yet, just return the value given
		fw->rpm_average = newVal;
	} else {
	fw->rpm_average = fw->rpm_average*(1 - fw->alpha) + (newVal*fw->alpha);
	}
	fw->raw_last_rpm = newVal;
}

/*-----------------------------------------------------------------------------*/
/** @brief      Set the controller position                                    */
/** @param[in]  fw pointer to flywheel controller structure                    */
/** @param[in]  desired velocity                                               */
/** @param[in]  predicted_drive estimated open loop motor drive                */
/*-----------------------------------------------------------------------------*/
void
FwVelocitySet( fw_controller *fw, int velocity, float predicted_drive )
{
    // set target velocity (motor rpm)
    fw->target        = velocity;

    // Set error so zero crossing is correctly detected
    //TODO: ensure that the error doesn't spike when the setpoint is changed
    fw->error         = fw->target - fw->rpm_average;
    fw->last_error    = fw->error;

    // Set predicted open loop drive value
    fw->drive_approx  = predicted_drive; //drive_approx is used as the power on the first zero-crossing after a setpoint change
    // Set flag to detect first zero crossing
    fw->first_cross   = 1;
    // clear tbh variable
    fw->drive_at_zero = fw->drive_approx; //drive_at_zero is the constant in the PID equation.  this gets revised at zero-crossings (feed-forward)
}

/*-----------------------------------------------------------------------------*/
/** @brief      Calculate the current flywheel motor velocity                  */
/** @param[in]  fw pointer to flywheel controller structure                    */
/*-----------------------------------------------------------------------------*/
void
FwCalculateSpeed( fw_controller *fw )
{
    int     delta_ms;
    int     delta_enc;

    //The current encoder value is set by the control task and saved in the fw->e_current variable

    // This is just used so we don't need to know how often we are called
    // how many mS since we were last here
    delta_ms   = fw->encoder_timestamp - fw->encoder_timestamp_last;
    fw->encoder_timestamp_last = fw->encoder_timestamp;

    // Change in encoder count
    delta_enc = (fw->e_current - fw->e_last);

    // save last position
    fw->e_last = fw->e_current;

    // Calculate velocity in rpm
    if (delta_ms > 0) { //prevent divide by 0 errors
    	fw->v_current = (1000.0 / delta_ms) * delta_enc * 60.0 / fw->ticks_per_rev;

		//only calculate a new average if there was a change in time
  	getNewAverage(fw, fw->v_current); //this will take the latest calculated RPM average
    																	//value and factor it into the average, which is then
   																		//the RPM value used in the TBH calculation
   }
}

/*-----------------------------------------------------------------------------*/
/** @brief      Update the velocity tbh controller variables                   */
/** @param[in]  fw pointer to flywheel controller structure                    */
/*-----------------------------------------------------------------------------*/
void
FwControlUpdateVelocity( fw_controller *fw )
{
    // calculate error in velocity
    // target is desired velocity
    // current is measured velocity
		// rpm_average is a weighted moving average of the past 5 RPM values
    //fw->error = fw->target - fw->current;
		fw->error = fw->target - fw->rpm_average;
		fw->errorSum += fw->error;

		// Use Kp and Ki as gains
		// This equation adds the P and I components to the estimated motor power to achieve the setpoint
		// drive_at_zero gets redefined to be more accurate on zero crossings but starts at the user's guesstimate
		// In theory, this means that P and I mainly account for balls shots and battery differences
    fw->drive = (fw->error * fw->Kp) + (fw->errorSum + fw->Ki) + fw->drive_at_zero;

    // Clip - we are only going forwards
    if( fw->drive > 1 )
          fw->drive = 1;
    if( fw->drive < 0 )
          fw->drive = 0;

    // Check for zero crossing
    if( sgn(fw->error) != sgn(fw->last_error) ) {
        // First zero crossing after a new set velocity command
        if( fw->first_cross ) {
            // Set drive to the open loop approximation
            fw->drive = fw->drive_approx;
            fw->first_cross = 0;
        }
        //else
        //    fw->drive = 0.5 * ( fw->drive + fw->drive_at_zero );

        // Save this drive value in the "tbh" variable
        fw->drive_at_zero = fw->drive;
    }

    // Save last error
    fw->last_error = fw->error;
}
